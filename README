'spiff' is a command line program that compares the contents of two files
and prints a description of the important differences between them in a
form rather like the standard 'diff' utility.  However, unlike diff, it is
not line oriented -- it compares word sequences with all white space and
newlines disregarded, so even if formatting is different you only see the
significant differences.  It also compares floating-point values with a
tolerance, so you can look in data files for discrepancies.

The program has many options (and some possibly esoteric capabilities!).
The full manual can be found in spiff.html.
 
The following is an abbreviated version (adapted for BeOS) of the original
README, which is available in the SRC folder.

Using with BeOS
===============
	
	Thw'spiff' executable is available in the top-level unpacked folder.
	You can run it from there if you want -- at least for testing --
	or move or copy (or link) the file 'spiff' to /home/config/bin for
	general access.
	
	The complete original package (minus the Sample files moved to the top-level
	folder) is here in SRC.  Two files had to be modified slightly for current C:
	misc.h and command.c, otherwise it compiles straightforwardly.  (That folder
	also has the original USENIX 88 paper describing the program.)

	To test the software say

			spiff Sample.1 Sample.2

		spiff should find 4 differences and
		you should see the words "added", "deleted", "changed",
		and "altered" as well as four number in stand-out mode.

			spiff Sample.1 Sample.2 | cat

		should produce the same output, only the differences
		should be underlined.  However, on many terminals the underlining
		does not appear. So try the command

			spiff Sample.1 Sample.2 | cat -v

		or whatever the equivalent to cat -v is on your system.
		[Neither of the above two works particularly well in Terminal, but
		underlining works nicely this way:
		
			spiff Sample.1 Sample.2 | more
		]

		A more complicated test set is found in Sample.3 and Sample.4
		These files show how to use embedded commands to do things
		like change the commenting convention and tolerances on the
		fly.  Be sure to run the command with the -s option to spiff
		-- and look at the files themselves to get an idea of what's
		going on:

			spiff -s 'command spiffword' Sample.3 Sample.4

		These files by no means provide an exhaustive test of
		spiff's features. But they should give you some idea if things
		are working right.


AUTHOR'S ADDRESS
	[I don't know if this is still valid -- the code is 15 years old...]
	Please send complaints, comments, praise, bug reports, etc to
		Dan Nachbar
		Bell Communications Research  (also known as BELLCORE)
		445 South St. Room 2B-389
		Morristown, NJ 07960

			nachbar@bellcore.com
		or
			bellcore!nachbar
		or
			(201) 829-4392  (praise only, please)

OVERVIEW OF OPERATION

Each of two input files is read and stored in core.
Then it is parsed into a series of tokens (literal strings and
floating point numbers, white space is ignored).
The token sequences are stored in core as well.
After both files have been parsed, a differencing algorithm is applied to
the token sequences.  The differencing algorithm
produces an edit script, which is then passed to an output routine.

SIZE LIMITS AND OTHER DEFAULTS
		file implementing limit		name		default value
maximum number of lines		lines.h		_L_MAXLINES	10000
	per file
maximum number of tokens	token.h		K_MAXTOKENS	50000
	per file
maximum line length		misc.h		Z_LINELEN	 1024
maximum word length		misc.h		Z_WORDLEN	   20
 (length of misc buffers for
 things like literal
 delimiters.
 NOT length of tokens which
 can be virtually any length)
default absolute tolerance	tol.h		_T_ADEF		   "1e-10"   
default relative tolerance	tol.h		_T_RDEF		   "1e-10"  
maximum number of commands	command.h	_C_CMDMAX	  100
 in effect at one time
maximum number of commenting	comment.h	W_COMMAX	   20
 conventions that can be
 in effect at one time
 (not including commenting
  conventions that are
  restricted to beginning
  of line)
maximum number of commenting	comment.h	W_BOLMAX	   20
 conventions that are
 restricted to beginning of
 line that are in effect at
 one time
maximum number of literal	comment.h	W_LITMAX	   20
 string conventions that
 can be in effect at one time
maximum number of tolerances	tol.h		_T_TOLMAX	   10
 that can be in effect at one
 time


PERFORMANCE

Spiff is big and slow.  It is big because all the storage is
in core.  It is a straightforward but boring task to move the temporary
storage into a file.  Someone who cares is invited to take on the job.
Spiff is slow because whenever a choice had to be made between
speed of operation and ease of coding, speed of operation almost always lost.
As the program matures it will almost certainly get smaller and faster.
Obvious performance enhancements have been avoided in order to make the
program available as soon as possible.

COPYRIGHT

Our lawyers advise the following:

                   Copyright (c) 1988 Bellcore
                       All Rights Reserved
  Permission is granted to copy or use this program, EXCEPT that it
  may not be sold for profit, the copyright notice must be reproduced
  on copies, and credit should be given to Bellcore where it is due.
  BELLCORE MAKES NO WARRANTY AND ACCEPTS NO LIABILITY FOR THIS PROGRAM.

Given that all of the above seems to be very reasonable, there should be no
reason for anyone to not play by the rules.


